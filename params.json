{"name":"Resque for perl","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### Install\r\n\r\nThis module is available from [CPAN](https://metacpan.org/module/Resque), you can install it like any other perl module:\r\n\r\n```\r\n$ cpanm Resque\r\n```\r\n\r\n### Usage\r\n\r\nFirst you create a Resque instance where you configure the L<Redis> backend and then you can\r\nstart sending jobs to be done by workers:\r\n\r\n```perl\r\n    use Resque;\r\n\r\n    my $r = Resque->new( redis => '127.0.0.1:6379' );\r\n\r\n    $r->push( my_queue => { \r\n        class => 'My::Task', \r\n        args => [ 'Hello world!' ]\r\n    });\r\n```\r\n\r\nBackground jobs can be any perl module that implement a perform() function. The Resque::Job object is\r\npassed as the only argument to this function:\r\n\r\n```perl\r\n    package My::Task;\r\n    use strict;\r\n    use v5.10;\r\n\r\n    sub perform {\r\n        my $job = shift;\r\n        say $job->args->[0];\r\n    }\r\n\r\n    1;\r\n```\r\n\r\nFinally, you run your jobs by instancing a L<Resque::Worker> and telling it to listen to one or more\r\nqueues:\r\n\r\n```perl\r\n    use Resque;\r\n\r\n    my $w = Resque->new( redis => '127.0.0.1:6379' )->worker;\r\n    $w->add_queue('my_queue');\r\n    $w->work;\r\n```\r\n\r\n### Description\r\n\r\nResque is a Redis-backed library for creating background jobs, placing them on multiple queues, \r\nand processing them later.\r\n\r\nThis library is a perl port of the original Ruby one: https://github.com/defunkt/resque\r\n\r\nMy main goal doing this port is to use the same backend to be able to manage the system using \r\nruby's resque-server webapp.\r\n\r\nAs extracted from the original docs, the main features of Resque are:\r\n\r\nResque workers can be distributed between multiple machines, support priorities, are resilient to \r\nmemory leaks, tell you what they're doing, and expect failure.\r\n\r\nResque queues are persistent; support constant time, atomic push and pop (thanks to Redis); provide \r\nvisibility into their contents; and store jobs as simple JSON hashes.\r\n\r\nThe Resque frontend tells you what workers are doing, what workers are not doing, what queues you're \r\nusing, what's in those queues, provides general usage stats, and helps you track failures.\r\n\r\nA lot more about Resque can be read on the original blog post: http://github.com/blog/542-introducing-resque\r\n","tagline":"Perl port of the original Ruby library. It's intended to work using the same backend to share tasks and be able to manage the system using ruby's resque-server webapp. Resque is a Redis-backed library for creating background jobs, placing them on multiple queues, and processing them later.","google":""}